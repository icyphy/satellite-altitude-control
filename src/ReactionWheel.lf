

/**
 * To get a compact diagram for self program, set layout to "Full Control" and
 * set spacing to 30%.
 *
 * @author Tassilo
 * @author Shaokai
 */


target C {
    cmake-include: ["./mujoco.cmake"],
    //scheduler: STATIC,
    workers: 1,
    timeout: 810 weeks, // 15 years of lifetime
}
/*target Cpp{
    cmake-include: "mujoco.cmake",
    fast: true
};*/

import MujocoSimulator from "./MujocoSimulator.lf";

preamble {=
#include <mujoco/mujoco.h>
#include <GLFW/glfw3.h>
//#include <chrono>
=}

/**
 * According to self site, gyroscopes operate at 6.6 kHz (i.e., with a period of ~152us).
 * https://support.sbg-systems.com/sc/imu/latest/user-manual/sampling-and-sensors-specifications
 */
reactor Gyroscope(period=10ms) {
    timer t(10ms, period)
    state value: float

    input sim: float;
    output out: float
    //@wcet(50 usec)

    reaction (sim) {=
        self->value = sim->value;
    =}
    reaction(t) -> out {=
        lf_set(out, self->value);
    =}
    //deadline(50 usec) {==}
}
/**
 * If the angular rate sensor is ADXRS300 from ANALOG DEVICES, then the sensor
 * resonant frequency is 14 kHz (i.e., with a period of ~72us).
 * https://www.analog.com/media/en/technical-documentation/data-sheets/ADXRS300.pdf
 */
reactor AngularRateSensor(period=10ms) {
    timer t(10ms, period)
    state value: float;

    input sim: float;
    output out: float
    //@wcet(50 usec)

    reaction (sim) {=
        self->value = sim->value;
    =}

    reaction(t) -> out {=
        lf_set(out, self->value);
    =}
    //deadline(25 usec) {==}
}
reactor Controller(period=100ms) {
    input current_angle: float;
    input current_speed: float;
    input desired_angle: float;

    state current_angle: float;
    state current_speed: float;
    state desired_angle: float;
    state last_update: float;
    state last_error: float;

    output out: float;
    logical action sendCommand;

    reaction(desired_angle) {=
        self->desired_angle = desired_angle->value;
    =}

    //@wcet(25 usec)
    reaction(current_speed) {=
        self->current_speed = current_speed->value;
    
    =}    
    //@wcet(100 usec)
    reaction(current_angle) -> sendCommand {=
        self->current_angle = current_angle->value;
        lf_schedule(sendCommand, MSEC(5));
    =}

    //@wcet(20 usec)
    reaction(sendCommand) -> out {=
        fprintf(stdout, "Calculating Controll\n");
        fflush(stdout);
        const double p_controller_value = 1.0;
        const double d_controller_value = 1.0;

        if (self->last_update == 0.0){
            self->last_update = lf_time_physical();
            return;
        }
        
        unsigned long current_tag = lf_time_physical();
        double time_diff =  (self->last_update - current_tag);
        double velocity_vector = (self->current_angle - self->desired_angle)/( time_diff );
        double error = (self->current_angle - self->desired_angle);

        double controll_vector = p_controller_value * velocity_vector + d_controller_value * (self->last_error - error);

        self->last_error = error;
        self->last_update = current_tag;

        lf_set(out, controll_vector);
    =}

    //@wcet(10 minute)
    reaction(shutdown) {==}
}
/**
 * We would likely use a stepper motor here. A closed loop stepper driver can
 * have a maximum driver pulse input frequency of 200 kHz (i.e., a period of 5 usec!).
 * https://www.amazon.com/gp/product/B08Q79YTQW/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1
 */
reactor Motor(freq: float=1000.0) {
    input in:float
    output out: float;
    //@wcet(3 sec)
    reaction(startup) {==}
    //@wcet(100 usec)
    reaction(in) -> out {=
        lf_set(out, in->value);
    =}
    //deadline(100 usec) {==}
}

reactor UserInput {
    logical action delay: float;
    output desired_angle: float;

    reaction(startup) -> delay {=
        //lf_schedule(delay, MSEC(100), 1.0);
        //lf_schedule(delay, MSEC(500), -1.0);
        //lf_schedule(delay, MSEC(1000), 2.0);
    =}
    
    reaction (delay) -> desired_angle {=
        lf_set(desired_angle, delay->value);
    =}
}

reactor ReactionWheelControll {
    input controll_data: mjData*;
    input input_model: mjModel*;
    output progress: int;

    state model: mjModel*;

    ars = new AngularRateSensor()
    gyro = new Gyroscope()
    controller = new Controller()
    motor = new Motor()
    user_input = new UserInput();

    user_input.desired_angle -> controller.desired_angle;
    gyro.out -> controller.current_angle
    ars.out -> controller.current_speed
    controller.out -> motor.in


    reaction (input_model) {=
        fprintf(stdout, "Received Model\n");
        fflush(stdout);
        self->model = input_model->value;
    =}

    reaction (controll_data) -> gyro.sim, ars.sim, progress {=
        fprintf(stdout, "Received World\n");
        fflush(stdout);
        mjData* simulation = controll_data->value;
        //lf_set(gyro.sim, simulation->sensordata[1]);
        //lf_set(ars.sim, 0.0);

        //simulation->ctrl[0] = 1.0;
        fprintf(stdout, "Returning Data Controll Data\n");
        fflush(stdout);
        lf_set(progress, 1);
    =}

    reaction (motor.out)  {=
        fprintf(stdout, "Data from Motor\n");
        fflush(stdout);
        //self->current_data->ctrl[0] = motor.out->value;
    =}
}

main reactor {
    controller = new ReactionWheelControll();
    sim = new MujocoSimulator(file="models/reaction_wheel.xml");

    sim.call_controller -> controller.controll_data;
    sim.output_model -> controller.input_model;
    controller.progress -> sim.return_controller;
}
